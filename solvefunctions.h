//
// Created by Legion on 07.09.2021.
//

#ifndef SOLVEEQUATION_SOLVEFUNCTIONS_H
#define SOLVEEQUATION_SOLVEFUNCTIONS_H

extern const double NOT_ROOT;

enum RANDOM {
    RAND_PRECISION = 100000
};

enum ROOTS {
    INFIN_ROOTS = -1
};

struct Equation {
    double coef_a, coef_b, coef_c;
    int roots_count;
    double x1, x2;
};

/*! \brief Функция вывода корней уравнения и их количества.
 *
 * @param [in] x1 первый корень, число с плавающей точкой, которое выводится по необходимости.
 * @param [in] x2 второй корень, число с плавающей точкой, которое выводится по необходимости.
 * @param [in] roots_number целое число, количество корней решенного уравнения.
 *
 * Функция выводит полученные корни с округлением до 3 знаков после точки.
 *
 */

void PrintResult (double x1, double x2, int roots_number);

/*! \brief Функция проверки числа на приближенность (равность) нулю.
 *
 * @param [in] number число с плавающей точкой, проверяемое на приближенность (равность) нулю.
 * @returns 1 если число конечно и не приближено (равно) нулю.
 * @returns 0 если число сильно приближено (равно) нулю.
 *
 * Функция принимает число типа double и проверяет его на конечность, после чего сравнивает его с константой PRECISION.
 *
 */


int IsApproxZero (double number);

/*! \brief Функция, решающая линейное уравнение.
 *
 * @param [in] b коэффициент уравнения b.
 * @param [in] c коэффициент уравнения c.
 * @param [out] x1 первый корень решаемого уравнения.
 * @returns 0 если уравнение не имеет ни одного действительного корня.
 * @returns INFIN_ROOTS если уравнение имеет бесконечное количество действительных корней.
 * @returns 1 если уравнение имеет один действительный корень.
 *
 * Функция обновляет значения первого корня x1 тогда и только тогда, когда этот корень существует.
 * В случае наличия бесконечного количества корней, в x1 записывается NOT_ROOT.
 *
 */

int SolveLinearEquation (double b, double c, double* x1);

/*! \brief Функция вывода приветственного сообщения с кратким описанием работы программы.
 *
 */

void PrintStartingMessage();

/*! \brief Функция получения коэффициентов квадратного уравнения с клавиатуры.
 *
 * @param [out] coef_a коэффициент уравнения a.
 * @param [out] coef_b коэффициент уравнения b.
 * @param [out] coef_c коэффициент уравнения c.
 *
 */

void GetCoefficients (double* coef_a, double* coef_b, double* coef_c);

/*! \brief Функция для решения квадратного уравнения.
 *
 * @param [in] coef_a коэффициент уравнения a.
 * @param [in] coef_b коэффициент уравнения b.
 * @param [in] coef_c коэффициент уравнения c.
 * @param [out] x1 первый корень решаемого уравнения.
 * @param [out] x2 второй корень решаемого уравнения.
 * @returns 0 если уравнение не имеет действительных корней.
 * @returns 1 если уравнение имеет один действительный корень (x1).
 * @returns 2 если уравнение имеет два действительных корня (x1, x2).
 *
 * Вызывает функцию решения линейного уравнения при a = 0.
 * В случае несуществования любого из корней (x1, x2), ему присваивается значение NOT_ROOT.
 * В остальных случаях решает квадратное уравнение стандартно: через дискриминант.
 *
 */

int SolveEquation (double coef_a, double coef_b, double coef_c, double* x1, double* x2);

/*! \brief Функция запуска выполнения решения квадратного уравнения и всех необходимых функций.
 *
 */

void RunEquationSolving ();

#endif //SOLVEEQUATION_SOLVEFUNCTIONS_H
